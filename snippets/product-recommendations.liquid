<div id="product-recommendations-container">
  <h4>Other Sizes:</h4>
  <div id="product-recommendations-grid" class="grid"></div>
  <div id="no-recommendations" style="display: none;">
    <p>No related products found. Check out some of our other popular products:</p>
    <div class="fallback-products-grid">
      {% for product in collections['your-fallback-collection'].products limit: 4 %}
        <div class="product-item">
          <a href="{{ product.url }}">
            <p>{{ product.title }}</p>
          
          </a>
        </div>
      {% endfor %}
    </div>
  </div>
</div>

<script>
  async function fetchProductRecommendations() {
    const baseUrl = '/recommendations/products.json'; // Shopify's recommendation API in JSON format
    const productId = {{ product.id }}; // Current product ID
    const limit = 4; // Number of recommended products to show
    const intent = 'related'; // Recommendation intent (can also be 'complementary')

    const url = `${baseUrl}?product_id=${productId}&limit=${limit}&intent=${intent}`;
    
    try {
      const response = await fetch(url);
      const data = await response.json(); // Use JSON format

      if (data && data.products && data.products.length > 0) {
        const recommendationsContainer = document.getElementById('product-recommendations-grid');
        
        // Display recommended products
        data.products.forEach(product => {
          const productHtml = `
            <div class="product-item">
              <a href="${product.url}">
                <img src="${product.featured_image}" alt="${product.title}">
                <p>${product.title}</p>
                <p>${product.price}</p>
              </a>
            </div>`;
          
          recommendationsContainer.innerHTML += productHtml;
        });
      } else {
        // Show fallback content if no recommendations
        document.getElementById('no-recommendations').style.display = 'block';
      }
    } catch (error) {
      console.error('Failed to load product recommendations:', error);
    }
  }

  document.addEventListener('DOMContentLoaded', fetchProductRecommendations);
</script>

<style>
  /* Basic styles for the grid and fallback */
  .grid {
    display: flex;
    gap: 16px;
  }
  .product-item {
    flex: 1 1 22%;
    text-align: center;
  }
  .product-item img {
    max-width: 100%;
    height: auto;
  }
  .fallback-products-grid {
    display: flex;
    gap: 16px;
  }
</style>
