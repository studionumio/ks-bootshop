<div class="related-products">
<div id="product-recommendations-container">
  <h6>Other Sizes:</h6>
  <ul id="product-recommendations-list" class="list"></ul>
  <div id="no-recommendations" style="display: none;">
    <p>No related products found. Check out some of our other popular products:</p>
    <ul>
      {% for product in collections['your-fallback-collection'].products limit: 5 %}
        <li><a href="{{ product.url }}">{{ product.metafields.custom.size.value }}</a></li>
      {% endfor %}
    </ul>
  </div>
</div>
</div>

<script>
  async function fetchProductRecommendations() {
    const baseUrl = '/recommendations/products.json'; // Shopify's recommendation API in JSON format
    const productId = {{ product.id }}; // Current product ID
    const limit = 4; // Number of recommended products to show
    const intent = 'related'; // Recommendation intent (can also be 'complementary')

    // Fetch the current product's size
    const currentSize = await fetchProductMetafields(productId);

    const url = `${baseUrl}?product_id=${productId}&limit=${limit}&intent=${intent}`;
    
    try {
      const response = await fetch(url);
      const data = await response.json(); // Parse JSON response

      if (data && data.products && data.products.length > 0) {
        const recommendationsList = document.getElementById('product-recommendations-list');
        
        for (const product of data.products) {
          // Fetch the metafields using the GraphQL API
          const customSize = await fetchProductMetafields(product.id);
          
          // Check if the size matches the current product's size
          const isCurrentProduct = customSize === currentSize;

          // Add a checkmark icon for the current product size
          const checkmark = isCurrentProduct ? '✔️ ' : ''; // Add a checkmark if it's the current size
          
          const productHtml = `<li><a href="${product.url}">${checkmark}${customSize}</a></li>`;
          recommendationsList.innerHTML += productHtml;
        }

        // Add the current product to the list if you want it to appear along with related products
        recommendationsList.innerHTML += `<li><a href="#">✔️ ${currentSize} (current size)</a></li>`;
      } else {
        // Show fallback content if no recommendations
        document.getElementById('no-recommendations').style.display = 'block';
      }
    } catch (error) {
      console.error('Failed to load product recommendations:', error);
    }
  }

  // Fetch product metafields via the Storefront API or GraphQL API
  async function fetchProductMetafields(productId) {
    const storefrontAccessToken = '8e0b6fef95af50d09f34e85b96c593d1'; // Replace with your Storefront API access token
    const storeDomain = 'abidehawaii.com'; // Replace with your store domain

    const query = `
      query {
        product(id: "gid://shopify/Product/${productId}") {
          metafield(namespace: "custom", key: "size") {
            value
          }
        }
      }
    `;

    try {
      const response = await fetch(`https://${storeDomain}/api/2024-01/graphql.json`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Shopify-Storefront-Access-Token': storefrontAccessToken,
        },
        body: JSON.stringify({ query }),
      });
      
      const result = await response.json();
      return result.data.product.metafield ? result.data.product.metafield.value : 'Unknown size';
    } catch (error) {
      console.error('Failed to fetch product metafields:', error);
      return 'Unknown size'; // Fallback in case of error
    }
  }

  document.addEventListener('DOMContentLoaded', fetchProductRecommendations);
</script>





<style>


  /* Simple styling for list of links */
  ul.list {
    list-style-type: none;
    padding-left: 0;
  }
  ul.list li {
    margin-bottom: 10px;
  }
  ul.list li a {
    text-decoration: none;
    color: #000;
  }
  ul.list li a:hover {
    text-decoration: underline;
  }
</style>
